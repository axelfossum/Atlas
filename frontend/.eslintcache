<<<<<<< HEAD
[{"/Users/axel/Programming/study-planner/frontend/src/index.js":"1","/Users/axel/Programming/study-planner/frontend/src/App.js":"2","/Users/axel/Programming/study-planner/frontend/src/components/navbar.component.js":"3","/Users/axel/Programming/study-planner/frontend/src/components/about.component.js":"4","/Users/axel/Programming/study-planner/frontend/src/components/register.component.js":"5","/Users/axel/Programming/study-planner/frontend/src/context/UserContext.js":"6","/Users/axel/Programming/study-planner/frontend/src/components/login.component.js":"7","/Users/axel/Programming/study-planner/frontend/src/components/archived-tasks-list.component.js":"8","/Users/axel/Programming/study-planner/frontend/src/components/active-tasks-list.component.js":"9","/Users/axel/Programming/study-planner/frontend/src/components/account.component.js":"10","/Users/axel/Programming/study-planner/frontend/src/components/error-notice.component.js":"11","/Users/axel/Programming/study-planner/frontend/src/components/authOptions.js":"12","/Users/axel/Programming/study-planner/frontend/src/components/footer.component.js":"13"},{"size":197,"mtime":1609093088095,"results":"14","hashOfConfig":"15"},{"size":2223,"mtime":1611253224451,"results":"16","hashOfConfig":"15"},{"size":1704,"mtime":1609950521442,"results":"17","hashOfConfig":"15"},{"size":1305,"mtime":1609249263123,"results":"18","hashOfConfig":"15"},{"size":4248,"mtime":1609333134056,"results":"19","hashOfConfig":"15"},{"size":75,"mtime":1609333134056,"results":"20","hashOfConfig":"15"},{"size":2622,"mtime":1609333134056,"results":"21","hashOfConfig":"15"},{"size":3579,"mtime":1610031245770,"results":"22","hashOfConfig":"15"},{"size":17215,"mtime":1611252970257,"results":"23","hashOfConfig":"15"},{"size":5111,"mtime":1610031601946,"results":"24","hashOfConfig":"15"},{"size":415,"mtime":1609333134056,"results":"25","hashOfConfig":"15"},{"size":1536,"mtime":1609948623213,"results":"26","hashOfConfig":"15"},{"size":441,"mtime":1611253382884,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1runfqf",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/axel/Programming/study-planner/frontend/src/index.js",[],["56","57"],"/Users/axel/Programming/study-planner/frontend/src/App.js",[],"/Users/axel/Programming/study-planner/frontend/src/components/navbar.component.js",[],"/Users/axel/Programming/study-planner/frontend/src/components/about.component.js",[],"/Users/axel/Programming/study-planner/frontend/src/components/register.component.js",[],"/Users/axel/Programming/study-planner/frontend/src/context/UserContext.js",[],"/Users/axel/Programming/study-planner/frontend/src/components/login.component.js",[],"/Users/axel/Programming/study-planner/frontend/src/components/archived-tasks-list.component.js",[],"/Users/axel/Programming/study-planner/frontend/src/components/active-tasks-list.component.js",["58"],"import React, { Component } from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport axios from 'axios';\nimport '../styles/custom.css';\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { Link } from 'react-router-dom'\nimport ErrorNotice from \"./error-notice.component\";\n\nconst Task = props => {\n\n    return (\n            <div className=\"card mr-4 my-3 col-md-3 shadow\">\n                <div className=\"card-body\">\n                    <div className=\"row\">\n                        <div className=\"col-10\">\n                            <h5 className=\"card-title\">{props.task.title}</h5>\n                            <h6 className=\"card-subtitle mb-2 text-muted\">{props.task.course}</h6>\n                            <h6 className=\"card-subtitle mb-2 text-muted\">{props.task.deadline.substring(0,10) + \" \" + props.task.deadline.substring(11,16)}</h6>\n                        </div>\n                        <div className=\"col-2\">\n                            <button type=\"button\" className=\"btn btn-outline-success btn-lg\" onClick={() => props.toggleFinish(props.task._id)}>✓</button>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col\">\n                            <p className=\"card-text overflow-auto\">{props.task.description}</p>\n                            <button className=\"btn p-0 btn-link\" onClick={() => props.showModal(props.task._id)}>✎ Edit</button>\n                            <div className=\"d-inline mx-2 btn-divider\">|</div>\n                            <button className=\"btn p-0 btn-link\" onClick={() => {props.toggleDelete(props.task._id)}}>✗ Delete</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n    );\n}\n\nexport default class ActiveTasksList extends Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            showModal: false,\n            showConfirmDelete: false,\n            isLoaded: false,\n            tasks: [],\n            userCourses: [],\n            currentTask_id: '',\n            currentTaskTitle: '',\n            currentTaskCourse: '',\n            currentTaskDescription: '',\n            currentTaskDeadline: new Date(),\n            addingNewTask: false,\n            timezoneOffset: new Date().getTimezoneOffset()*60*1000,\n            isLoggedIn: false,\n            newCourse: '',\n            error: undefined\n        };\n\n        this.toggleDelete = this.toggleDelete.bind(this);\n        this.toggleModal = this.toggleModal.bind(this);\n        this.onChangeCurrentTaskTitle = this.onChangeCurrentTaskTitle.bind(this);\n        this.onChangeCurrentTaskCourse = this.onChangeCurrentTaskCourse.bind(this);\n        this.onChangeCurrentTaskDeadline = this.onChangeCurrentTaskDeadline.bind(this);\n        this.onChangeCurrentTaskDescription = this.onChangeCurrentTaskDescription.bind(this);\n        this.onChangeNewCourse = this.onChangeNewCourse.bind(this);\n        this.onEditTask = this.onEditTask.bind(this);\n        this.toggleFinish = this.toggleFinish.bind(this);\n        this.sortBy = this.sortBy.bind(this);\n        this.confirmDelete = this.confirmDelete.bind(this);\n\n    }\n    \n    componentDidMount(){\n\n        const token = localStorage.getItem('auth-token');\n        if(token){\n            this.setState({\n                isLoggedIn: true\n            });\n        }\n\n        axios.get('http://localhost:5000/sortByDate', { headers: {'x-auth-token': token} })\n            .then(response => {\n                this.setState({\n                    isLoaded: true,\n                    tasks: response.data.filter(el => el.finished === false)\n                });\n            })\n            .catch(err => {\n                console.log(err);\n            });\n\n        axios.get('http://localhost:5000/user/getuser/', { headers: {'x-auth-token': token} })\n            .then(response => {\n                this.setState({ userCourses: response.data.courses });\n            })\n            .catch(err => {\n                console.log(err);\n            });\n    }\n\n    toggleDelete(id){\n        this.setState({\n            currentTask_id: id,\n            showConfirmDelete: !this.state.showConfirmDelete\n        });\n    }\n\n    sortBy(e){\n        const token = localStorage.getItem('auth-token');\n        axios.get('http://localhost:5000/'+ e, { headers: {'x-auth-token': token} })\n        .then(res =>{\n            this.setState({\n                tasks: res.data.filter(el => el.finished === false)\n            })\n        })\n        .catch(err => {\n            console.log(err);\n        });\n    }\n\n\n    confirmDelete(e){\n        e.preventDefault();\n\n        axios.delete('http://localhost:5000/'+this.state.currentTask_id)\n        .then(res => {\n            console.log(res.data);\n        })\n        .catch(err => console.log(err)); \n        \n\n        this.setState({\n            showConfirmDelete: !this.state.showConfirmDelete,\n            tasks: this.state.tasks.filter(el => el._id !== this.state.currentTask_id),\n        });\n    }\n\n    toggleFinish(id){\n        const task = {\n            finished: !this.state.tasks.find(task => task._id === id).finished\n        }\n\n        axios.post('http://localhost:5000/update/'+ id, task)\n        .then(res => {\n            console.log(res.data);\n        })\n        .catch(err => console.log(err));\n\n        this.setState({\n            tasks: this.state.tasks.filter(el => el._id !== id)\n        });\n    }\n\n    toggleModal(id){\n        if(id !== ''){\n            this.setState({\n                addingNewTask: false,\n                currentTask_id: id,\n                currentTaskTitle: this.state.tasks.find(task => task._id === id).title,\n                currentTaskCourse: this.state.tasks.find(task => task._id === id).course,\n                currentTaskDeadline: new Date(Date.parse(this.state.tasks.find(task => task._id === id).deadline) + this.state.timezoneOffset),\n                currentTaskDescription: this.state.tasks.find(task => task._id === id).description,\n            });\n        } else {\n            this.reset()\n            this.setState({\n                addingNewTask: true\n            });\n        }\n\n        this.setState({\n            showModal: !this.state.showModal,\n        });\n        \n    }\n\n    reset(){\n        this.setState({\n            currentTask_id: '',\n            currentTaskTitle: '',\n            currentTaskCourse: this.state.userCourses[0],\n            currentTaskDescription: '',\n            currentTaskDeadline: new Date(),\n            newCourse: ''\n        })     \n    }\n\n    onChangeCurrentTaskTitle(e){\n        this.setState({\n           currentTaskTitle: e.target.value \n        });\n    }\n\n    onChangeCurrentTaskCourse(e){\n        this.setState({\n            currentTaskCourse: e.target.value\n        });\n    }\n\n    onChangeCurrentTaskDeadline(deadline){\n        this.setState({\n            currentTaskDeadline: deadline\n        });\n    }\n\n    onChangeCurrentTaskDescription(e){\n        this.setState({\n            currentTaskDescription: e.target.value\n        });\n    }\n\n    onChangeNewCourse(e){\n        this.setState({\n            newCourse: e.target.value\n        });\n    }\n\n    onEditTask(e){\n        e.preventDefault();\n\n        const task = {\n            title: this.state.currentTaskTitle,\n            description: this.state.currentTaskDescription,\n            course: (this.state.newCourse !== '') ? this.state.newCourse : this.state.currentTaskCourse,\n            finished: false\n        }\n\n        const token = localStorage.getItem('auth-token');\n\n        if(this.state.addingNewTask){\n\n            // We will want to update the tasks state, so we store the previous version here, which we will modify below\n            let prevTasks = this.state.tasks;\n\n            // If no course has been selected from the dropdown (if no course has been added) and no new course typed in\n            if(task.course === undefined) task.course = 'No course';\n\n            // Important to get the right date (because of time zone conversions etc..)\n            task.deadline = new Date(Date.parse(this.state.currentTaskDeadline) - this.state.timezoneOffset);\n\n            // POST the new task and recieve the db-saved new task with its new id from backend.\n            axios.post('http://localhost:5000/add/', task, { headers: {'x-auth-token': token} })\n            .then(res => {\n                prevTasks.push(res.data);\n                this.setState({ tasks: prevTasks, showModal: !this.state.showModal, error: undefined });\n            })\n            .catch(err => err.response.data.msg && this.setState( {error: err.response.data.msg} ));\n\n        } else {\n\n            // We will want to update the tasks state, so we store the previous version here, which we will modify below\n            let prevTasks = this.state.tasks;\n\n            // Important to get the right date (because of time zone conversions etc..) NOT the same as the similar line above\n            task.deadline = new Date(Date.parse(this.state.currentTaskDeadline));\n\n            // POST the updated task and recieve the db-updated task which we use to update our react states to trigger re-render\n            axios.post('http://localhost:5000/update/'+this.state.currentTask_id, task, { headers: {'x-auth-token': token} })\n            .then(res => {\n                const oldTaskIndex = prevTasks.findIndex(element => element._id === this.state.currentTask_id);\n                prevTasks[oldTaskIndex] = res.data;\n                this.setState({ tasks: prevTasks, showModal: !this.state.showModal, error: undefined });\n            })\n            .catch(err => err.response.data.msg && this.setState( {error: err.response.data.msg} ));\n        }\n\n        // If user has wished to add a new course, then we must add it to the database\n        if(this.state.newCourse !== '' && this.state.error !== undefined){\n            const newCourse = {newCourse: this.state.newCourse};\n            axios.post('http://localhost:5000/user/add-course/', newCourse, { headers: {'x-auth-token': token} });\n        }\n\n    }\n\n    render(){\n        const {isLoaded, tasks, isLoggedIn} = this.state;\n\n        if(!isLoggedIn){\n            return (\n                <div className=\"container-fluid px-5 pt-10 text-center\">\n                    <h1 className=\"h1-lg mb-4\">\n                        Welcome to Atlas!\n                    </h1>\n                    <div className=\"mb-7\">\n                        <img src={process.env.PUBLIC_URL + '/pen-small.svg'} alt=\"\" width=\"150\" height=\"150\"></img>\n                    </div>\n                    <div>\n                        <Link to=\"/login\">\n                            <button type=\"button\" className=\"btn btn-purple btn-lg px-5 mr-4 shadow\">Sign in</button>\n                        </Link>\n                        <Link to=\"/register\">\n                            <button type=\"button\" className=\"btn btn-secondary btn-lg px-5 shadow\">Register</button>\n                        </Link>\n                    </div>\n                </div>\n            );\n        }\n\n        if(!isLoaded && isLoggedIn){\n            return (\n                <div className=\"container-fluid px-5 pt-4\">\n                    Loading...\n                </div>\n            );\n        }\n\n        let finalBtn;\n        if(this.state.addingNewTask){\n            finalBtn = <button className=\"btn btn-purple\">Add new task</button>;\n        } else {\n            finalBtn = <button className=\"btn btn-purple\">Save changes</button>;\n        }\n\n        return (\n            <div className=\"container-fluid px-5 pt-4 main-atlas\">\n                <div className=\"row my-3\">\n                    <button className=\"btn btn-purple btn-lg shadow\" onClick={() => this.toggleModal('')}>+ &nbsp;Add new task</button>\n                    <button className=\"btn btn-gray btn-lg shadow\" onClick={() => this.sortBy('sortByDate')}>Sort by duetime</button>\n                    <button className=\"btn btn-gray btn-lg shadow\" onClick={() => this.sortBy('sortByCourse')}>Sort by course</button>\n                </div>\n                <div className=\"row\">\n                    {this.state.tasks.map(currentTask => <Task key={currentTask._id} task={currentTask} \n                    toggleDelete={this.toggleDelete} showModal={this.toggleModal} toggleFinish={this.toggleFinish}/>) }\n                </div>\n\n                <Modal show={this.state.showModal} onHide={() => this.toggleModal('')} size=\"lg\">\n                    <form onSubmit={this.onEditTask}>\n                        <Modal.Body>\n                            <div className=\"p-2\">\n                                {this.state.error !== undefined && (\n                                    <ErrorNotice message={this.state.error} clearError={() => this.setState( {error: undefined} )} />\n                                )}\n                                <div className=\"row mt-2 mb-3\">\n                                    <div className=\"col form-group\">\n                                        <label>Title: </label>\n                                        <input type=\"text\"\n                                            className=\"form-control\"\n                                            value={this.state.currentTaskTitle}\n                                            onChange={this.onChangeCurrentTaskTitle}\n                                        />\n                                    </div>\n                                </div>\n                                <div className=\"row mb-0\">\n                                    <div className=\"col-6 form-group\">\n                                        <label>Course: </label>\n                                        <select className=\"form-control\" value={this.state.currentTaskCourse} onChange={this.onChangeCurrentTaskCourse}>\n                                            {this.state.userCourses.map(course => <option key={course} className=\"form-control\">{course}</option>)}\n                                        </select>\n                                    </div>\n                                    <div className=\"col-6 form-group\">\n                                        <label>Deadline: </label><br/>\n                                        <DatePicker\n                                            className=\"form-control\"\n                                            selected={this.state.currentTaskDeadline}\n                                            showTimeSelect\n                                            timeFormat=\"HH:mm\"\n                                            dateFormat=\"dd/MM/yyyy HH:mm\"\n                                            onChange={this.onChangeCurrentTaskDeadline}\n                                        />\n                                    </div>\n                                </div>\n                                <div className=\"row mb-3\">\n                                    <div className=\"col-6 form-group\">\n                                        <input type=\"text\"\n                                            className=\"form-control\"\n                                            value={this.state.newCourse}\n                                            onChange={this.onChangeNewCourse}\n                                            placeholder=\"Or add a new course:\"\n                                        />\n                                    </div>\n                                    <div className=\"col-6\"></div>\n                                </div>\n                                <div className=\"form-group\">\n                                    <label>Description: </label>\n                                    <textarea\n                                        className=\"form-control\"\n                                        value={this.state.currentTaskDescription}\n                                        onChange={this.onChangeCurrentTaskDescription}\n                                    />\n                                </div>\n                            </div>\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <button type=\"button\" className=\"btn btn-light\" onClick={() => this.toggleModal('')}>Cancel</button>\n                            {finalBtn}\n                        </Modal.Footer>\n                    </form>\n                </Modal>\n                <Modal show={this.state.showConfirmDelete} onHide={() => this.toggleDelete('')}>\n                    <form onSubmit={this.confirmDelete}>\n                        <Modal.Body>\n                            <div className=\"p-2 text-center\">\n                                Are you sure you want to delete this task?\n                                <br/>\n                                <br/>\n                                <button type=\"button\" className=\"btn btn-secondary mr-2\" onClick={() => this.toggleDelete(this.state.currentTask_id)}>Cancel</button>\n                                <button className=\"btn btn-danger ml-2\">Confirm</button>\n                            </div>\n                        </Modal.Body>\n                    </form>\n                </Modal>\n            </div>\n        );\n    }\n\n}","/Users/axel/Programming/study-planner/frontend/src/components/account.component.js",[],"/Users/axel/Programming/study-planner/frontend/src/components/error-notice.component.js",[],"/Users/axel/Programming/study-planner/frontend/src/components/authOptions.js",[],"/Users/axel/Programming/study-planner/frontend/src/components/footer.component.js",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":278,"column":26,"nodeType":"65","messageId":"66","endLine":278,"endColumn":31},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'tasks' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]
=======
[{"/Users/gabriel/Desktop/atlas/frontend/src/index.js":"1","/Users/gabriel/Desktop/atlas/frontend/src/App.js":"2","/Users/gabriel/Desktop/atlas/frontend/src/components/account.component.js":"3","/Users/gabriel/Desktop/atlas/frontend/src/components/register.component.js":"4","/Users/gabriel/Desktop/atlas/frontend/src/components/about.component.js":"5","/Users/gabriel/Desktop/atlas/frontend/src/components/login.component.js":"6","/Users/gabriel/Desktop/atlas/frontend/src/context/UserContext.js":"7","/Users/gabriel/Desktop/atlas/frontend/src/components/navbar.component.js":"8","/Users/gabriel/Desktop/atlas/frontend/src/components/active-tasks-list.component.js":"9","/Users/gabriel/Desktop/atlas/frontend/src/components/archived-tasks-list.component.js":"10","/Users/gabriel/Desktop/atlas/frontend/src/components/error-notice.component.js":"11","/Users/gabriel/Desktop/atlas/frontend/src/components/authOptions.js":"12","/Users/gabriel/Desktop/atlas/frontend/src/components/footer.component.js":"13"},{"size":197,"mtime":1608501723503,"results":"14","hashOfConfig":"15"},{"size":2223,"mtime":1611253224884,"results":"16","hashOfConfig":"15"},{"size":5111,"mtime":1610031881550,"results":"17","hashOfConfig":"15"},{"size":4248,"mtime":1609583625052,"results":"18","hashOfConfig":"15"},{"size":1305,"mtime":1609332925863,"results":"19","hashOfConfig":"15"},{"size":2622,"mtime":1609583625052,"results":"20","hashOfConfig":"15"},{"size":75,"mtime":1609332925866,"results":"21","hashOfConfig":"15"},{"size":1704,"mtime":1609957694954,"results":"22","hashOfConfig":"15"},{"size":17215,"mtime":1611216843689,"results":"23","hashOfConfig":"15"},{"size":3579,"mtime":1610031881550,"results":"24","hashOfConfig":"15"},{"size":415,"mtime":1609332925865,"results":"25","hashOfConfig":"15"},{"size":1536,"mtime":1609612337777,"results":"26","hashOfConfig":"15"},{"size":437,"mtime":1611253224884,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"ixdvs6",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/Users/gabriel/Desktop/atlas/frontend/src/index.js",[],["56","57"],"/Users/gabriel/Desktop/atlas/frontend/src/App.js",[],"/Users/gabriel/Desktop/atlas/frontend/src/components/account.component.js",[],"/Users/gabriel/Desktop/atlas/frontend/src/components/register.component.js",[],"/Users/gabriel/Desktop/atlas/frontend/src/components/about.component.js",[],"/Users/gabriel/Desktop/atlas/frontend/src/components/login.component.js",[],"/Users/gabriel/Desktop/atlas/frontend/src/context/UserContext.js",[],"/Users/gabriel/Desktop/atlas/frontend/src/components/navbar.component.js",[],"/Users/gabriel/Desktop/atlas/frontend/src/components/active-tasks-list.component.js",["58"],"import React, { Component } from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport axios from 'axios';\nimport '../styles/custom.css';\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { Link } from 'react-router-dom'\nimport ErrorNotice from \"./error-notice.component\";\n\nconst Task = props => {\n\n    return (\n            <div className=\"card mr-4 my-3 col-md-3 shadow\">\n                <div className=\"card-body\">\n                    <div className=\"row\">\n                        <div className=\"col-10\">\n                            <h5 className=\"card-title\">{props.task.title}</h5>\n                            <h6 className=\"card-subtitle mb-2 text-muted\">{props.task.course}</h6>\n                            <h6 className=\"card-subtitle mb-2 text-muted\">{props.task.deadline.substring(0,10) + \" \" + props.task.deadline.substring(11,16)}</h6>\n                        </div>\n                        <div className=\"col-2\">\n                            <button type=\"button\" className=\"btn btn-outline-success btn-lg\" onClick={() => props.toggleFinish(props.task._id)}>✓</button>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"col\">\n                            <p className=\"card-text overflow-auto\">{props.task.description}</p>\n                            <button className=\"btn p-0 btn-link\" onClick={() => props.showModal(props.task._id)}>✎ Edit</button>\n                            <div className=\"d-inline mx-2 btn-divider\">|</div>\n                            <button className=\"btn p-0 btn-link\" onClick={() => {props.toggleDelete(props.task._id)}}>✗ Delete</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n    );\n}\n\nexport default class ActiveTasksList extends Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            showModal: false,\n            showConfirmDelete: false,\n            isLoaded: false,\n            tasks: [],\n            userCourses: [],\n            currentTask_id: '',\n            currentTaskTitle: '',\n            currentTaskCourse: '',\n            currentTaskDescription: '',\n            currentTaskDeadline: new Date(),\n            addingNewTask: false,\n            timezoneOffset: new Date().getTimezoneOffset()*60*1000,\n            isLoggedIn: false,\n            newCourse: '',\n            error: undefined\n        };\n\n        this.toggleDelete = this.toggleDelete.bind(this);\n        this.toggleModal = this.toggleModal.bind(this);\n        this.onChangeCurrentTaskTitle = this.onChangeCurrentTaskTitle.bind(this);\n        this.onChangeCurrentTaskCourse = this.onChangeCurrentTaskCourse.bind(this);\n        this.onChangeCurrentTaskDeadline = this.onChangeCurrentTaskDeadline.bind(this);\n        this.onChangeCurrentTaskDescription = this.onChangeCurrentTaskDescription.bind(this);\n        this.onChangeNewCourse = this.onChangeNewCourse.bind(this);\n        this.onEditTask = this.onEditTask.bind(this);\n        this.toggleFinish = this.toggleFinish.bind(this);\n        this.sortBy = this.sortBy.bind(this);\n        this.confirmDelete = this.confirmDelete.bind(this);\n\n    }\n    \n    componentDidMount(){\n\n        const token = localStorage.getItem('auth-token');\n        if(token){\n            this.setState({\n                isLoggedIn: true\n            });\n        }\n\n        axios.get('http://localhost:5000/sortByDate', { headers: {'x-auth-token': token} })\n            .then(response => {\n                this.setState({\n                    isLoaded: true,\n                    tasks: response.data.filter(el => el.finished === false)\n                });\n            })\n            .catch(err => {\n                console.log(err);\n            });\n\n        axios.get('http://localhost:5000/user/getuser/', { headers: {'x-auth-token': token} })\n            .then(response => {\n                this.setState({ userCourses: response.data.courses });\n            })\n            .catch(err => {\n                console.log(err);\n            });\n    }\n\n    toggleDelete(id){\n        this.setState({\n            currentTask_id: id,\n            showConfirmDelete: !this.state.showConfirmDelete\n        });\n    }\n\n    sortBy(e){\n        const token = localStorage.getItem('auth-token');\n        axios.get('http://localhost:5000/'+ e, { headers: {'x-auth-token': token} })\n        .then(res =>{\n            this.setState({\n                tasks: res.data.filter(el => el.finished === false)\n            })\n        })\n        .catch(err => {\n            console.log(err);\n        });\n    }\n\n\n    confirmDelete(e){\n        e.preventDefault();\n\n        axios.delete('http://localhost:5000/'+this.state.currentTask_id)\n        .then(res => {\n            console.log(res.data);\n        })\n        .catch(err => console.log(err)); \n        \n\n        this.setState({\n            showConfirmDelete: !this.state.showConfirmDelete,\n            tasks: this.state.tasks.filter(el => el._id !== this.state.currentTask_id),\n        });\n    }\n\n    toggleFinish(id){\n        const task = {\n            finished: !this.state.tasks.find(task => task._id === id).finished\n        }\n\n        axios.post('http://localhost:5000/update/'+ id, task)\n        .then(res => {\n            console.log(res.data);\n        })\n        .catch(err => console.log(err));\n\n        this.setState({\n            tasks: this.state.tasks.filter(el => el._id !== id)\n        });\n    }\n\n    toggleModal(id){\n        if(id !== ''){\n            this.setState({\n                addingNewTask: false,\n                currentTask_id: id,\n                currentTaskTitle: this.state.tasks.find(task => task._id === id).title,\n                currentTaskCourse: this.state.tasks.find(task => task._id === id).course,\n                currentTaskDeadline: new Date(Date.parse(this.state.tasks.find(task => task._id === id).deadline) + this.state.timezoneOffset),\n                currentTaskDescription: this.state.tasks.find(task => task._id === id).description,\n            });\n        } else {\n            this.reset()\n            this.setState({\n                addingNewTask: true\n            });\n        }\n\n        this.setState({\n            showModal: !this.state.showModal,\n        });\n        \n    }\n\n    reset(){\n        this.setState({\n            currentTask_id: '',\n            currentTaskTitle: '',\n            currentTaskCourse: this.state.userCourses[0],\n            currentTaskDescription: '',\n            currentTaskDeadline: new Date(),\n            newCourse: ''\n        })     \n    }\n\n    onChangeCurrentTaskTitle(e){\n        this.setState({\n           currentTaskTitle: e.target.value \n        });\n    }\n\n    onChangeCurrentTaskCourse(e){\n        this.setState({\n            currentTaskCourse: e.target.value\n        });\n    }\n\n    onChangeCurrentTaskDeadline(deadline){\n        this.setState({\n            currentTaskDeadline: deadline\n        });\n    }\n\n    onChangeCurrentTaskDescription(e){\n        this.setState({\n            currentTaskDescription: e.target.value\n        });\n    }\n\n    onChangeNewCourse(e){\n        this.setState({\n            newCourse: e.target.value\n        });\n    }\n\n    onEditTask(e){\n        e.preventDefault();\n\n        const task = {\n            title: this.state.currentTaskTitle,\n            description: this.state.currentTaskDescription,\n            course: (this.state.newCourse !== '') ? this.state.newCourse : this.state.currentTaskCourse,\n            finished: false\n        }\n\n        const token = localStorage.getItem('auth-token');\n\n        if(this.state.addingNewTask){\n\n            // We will want to update the tasks state, so we store the previous version here, which we will modify below\n            let prevTasks = this.state.tasks;\n\n            // If no course has been selected from the dropdown (if no course has been added) and no new course typed in\n            if(task.course === undefined) task.course = 'No course';\n\n            // Important to get the right date (because of time zone conversions etc..)\n            task.deadline = new Date(Date.parse(this.state.currentTaskDeadline) - this.state.timezoneOffset);\n\n            // POST the new task and recieve the db-saved new task with its new id from backend.\n            axios.post('http://localhost:5000/add/', task, { headers: {'x-auth-token': token} })\n            .then(res => {\n                prevTasks.push(res.data);\n                this.setState({ tasks: prevTasks, showModal: !this.state.showModal, error: undefined });\n            })\n            .catch(err => err.response.data.msg && this.setState( {error: err.response.data.msg} ));\n\n        } else {\n\n            // We will want to update the tasks state, so we store the previous version here, which we will modify below\n            let prevTasks = this.state.tasks;\n\n            // Important to get the right date (because of time zone conversions etc..) NOT the same as the similar line above\n            task.deadline = new Date(Date.parse(this.state.currentTaskDeadline));\n\n            // POST the updated task and recieve the db-updated task which we use to update our react states to trigger re-render\n            axios.post('http://localhost:5000/update/'+this.state.currentTask_id, task, { headers: {'x-auth-token': token} })\n            .then(res => {\n                const oldTaskIndex = prevTasks.findIndex(element => element._id === this.state.currentTask_id);\n                prevTasks[oldTaskIndex] = res.data;\n                this.setState({ tasks: prevTasks, showModal: !this.state.showModal, error: undefined });\n            })\n            .catch(err => err.response.data.msg && this.setState( {error: err.response.data.msg} ));\n        }\n\n        // If user has wished to add a new course, then we must add it to the database\n        if(this.state.newCourse !== '' && this.state.error !== undefined){\n            const newCourse = {newCourse: this.state.newCourse};\n            axios.post('http://localhost:5000/user/add-course/', newCourse, { headers: {'x-auth-token': token} });\n        }\n\n    }\n\n    render(){\n        const {isLoaded, tasks, isLoggedIn} = this.state;\n\n        if(!isLoggedIn){\n            return (\n                <div className=\"container-fluid px-5 pt-10 text-center\">\n                    <h1 className=\"h1-lg mb-4\">\n                        Welcome to Atlas!\n                    </h1>\n                    <div className=\"mb-7\">\n                        <img src={process.env.PUBLIC_URL + '/pen-small.svg'} alt=\"\" width=\"150\" height=\"150\"></img>\n                    </div>\n                    <div>\n                        <Link to=\"/login\">\n                            <button type=\"button\" className=\"btn btn-purple btn-lg px-5 mr-4 shadow\">Sign in</button>\n                        </Link>\n                        <Link to=\"/register\">\n                            <button type=\"button\" className=\"btn btn-secondary btn-lg px-5 shadow\">Register</button>\n                        </Link>\n                    </div>\n                </div>\n            );\n        }\n\n        if(!isLoaded && isLoggedIn){\n            return (\n                <div className=\"container-fluid px-5 pt-4\">\n                    Loading...\n                </div>\n            );\n        }\n\n        let finalBtn;\n        if(this.state.addingNewTask){\n            finalBtn = <button className=\"btn btn-purple\">Add new task</button>;\n        } else {\n            finalBtn = <button className=\"btn btn-purple\">Save changes</button>;\n        }\n\n        return (\n            <div className=\"container-fluid px-5 pt-4 main-atlas\">\n                <div className=\"row my-3\">\n                    <button className=\"btn btn-purple btn-lg shadow\" onClick={() => this.toggleModal('')}>+ &nbsp;Add new task</button>\n                    <button className=\"btn btn-gray btn-lg shadow\" onClick={() => this.sortBy('sortByDate')}>Sort by duetime</button>\n                    <button className=\"btn btn-gray btn-lg shadow\" onClick={() => this.sortBy('sortByCourse')}>Sort by course</button>\n                </div>\n                <div className=\"row\">\n                    {this.state.tasks.map(currentTask => <Task key={currentTask._id} task={currentTask} \n                    toggleDelete={this.toggleDelete} showModal={this.toggleModal} toggleFinish={this.toggleFinish}/>) }\n                </div>\n\n                <Modal show={this.state.showModal} onHide={() => this.toggleModal('')} size=\"lg\">\n                    <form onSubmit={this.onEditTask}>\n                        <Modal.Body>\n                            <div className=\"p-2\">\n                                {this.state.error !== undefined && (\n                                    <ErrorNotice message={this.state.error} clearError={() => this.setState( {error: undefined} )} />\n                                )}\n                                <div className=\"row mt-2 mb-3\">\n                                    <div className=\"col form-group\">\n                                        <label>Title: </label>\n                                        <input type=\"text\"\n                                            className=\"form-control\"\n                                            value={this.state.currentTaskTitle}\n                                            onChange={this.onChangeCurrentTaskTitle}\n                                        />\n                                    </div>\n                                </div>\n                                <div className=\"row mb-0\">\n                                    <div className=\"col-6 form-group\">\n                                        <label>Course: </label>\n                                        <select className=\"form-control\" value={this.state.currentTaskCourse} onChange={this.onChangeCurrentTaskCourse}>\n                                            {this.state.userCourses.map(course => <option key={course} className=\"form-control\">{course}</option>)}\n                                        </select>\n                                    </div>\n                                    <div className=\"col-6 form-group\">\n                                        <label>Deadline: </label><br/>\n                                        <DatePicker\n                                            className=\"form-control\"\n                                            selected={this.state.currentTaskDeadline}\n                                            showTimeSelect\n                                            timeFormat=\"HH:mm\"\n                                            dateFormat=\"dd/MM/yyyy HH:mm\"\n                                            onChange={this.onChangeCurrentTaskDeadline}\n                                        />\n                                    </div>\n                                </div>\n                                <div className=\"row mb-3\">\n                                    <div className=\"col-6 form-group\">\n                                        <input type=\"text\"\n                                            className=\"form-control\"\n                                            value={this.state.newCourse}\n                                            onChange={this.onChangeNewCourse}\n                                            placeholder=\"Or add a new course:\"\n                                        />\n                                    </div>\n                                    <div className=\"col-6\"></div>\n                                </div>\n                                <div className=\"form-group\">\n                                    <label>Description: </label>\n                                    <textarea\n                                        className=\"form-control\"\n                                        value={this.state.currentTaskDescription}\n                                        onChange={this.onChangeCurrentTaskDescription}\n                                    />\n                                </div>\n                            </div>\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <button type=\"button\" className=\"btn btn-light\" onClick={() => this.toggleModal('')}>Cancel</button>\n                            {finalBtn}\n                        </Modal.Footer>\n                    </form>\n                </Modal>\n                <Modal show={this.state.showConfirmDelete} onHide={() => this.toggleDelete('')}>\n                    <form onSubmit={this.confirmDelete}>\n                        <Modal.Body>\n                            <div className=\"p-2 text-center\">\n                                Are you sure you want to delete this task?\n                                <br/>\n                                <br/>\n                                <button type=\"button\" className=\"btn btn-secondary mr-2\" onClick={() => this.toggleDelete(this.state.currentTask_id)}>Cancel</button>\n                                <button className=\"btn btn-danger ml-2\">Confirm</button>\n                            </div>\n                        </Modal.Body>\n                    </form>\n                </Modal>\n            </div>\n        );\n    }\n\n}","/Users/gabriel/Desktop/atlas/frontend/src/components/archived-tasks-list.component.js",[],"/Users/gabriel/Desktop/atlas/frontend/src/components/error-notice.component.js",[],"/Users/gabriel/Desktop/atlas/frontend/src/components/authOptions.js",[],"/Users/gabriel/Desktop/atlas/frontend/src/components/footer.component.js",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":278,"column":26,"nodeType":"65","messageId":"66","endLine":278,"endColumn":31},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'tasks' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]
>>>>>>> ebf146ba9b37159c832fe44dd645fd9476cee744
