[{"/Users/axel/Programming/study-planner/frontend/src/index.js":"1","/Users/axel/Programming/study-planner/frontend/src/App.js":"2","/Users/axel/Programming/study-planner/frontend/src/components/navbar.component.js":"3","/Users/axel/Programming/study-planner/frontend/src/components/about.component.js":"4","/Users/axel/Programming/study-planner/frontend/src/components/register.component.js":"5","/Users/axel/Programming/study-planner/frontend/src/context/UserContext.js":"6","/Users/axel/Programming/study-planner/frontend/src/components/login.component.js":"7","/Users/axel/Programming/study-planner/frontend/src/components/archived-tasks-list.component.js":"8","/Users/axel/Programming/study-planner/frontend/src/components/active-tasks-list.component.js":"9","/Users/axel/Programming/study-planner/frontend/src/components/account.component.js":"10","/Users/axel/Programming/study-planner/frontend/src/components/error-notice.component.js":"11","/Users/axel/Programming/study-planner/frontend/src/components/authOptions.js":"12"},{"size":197,"mtime":1609093088095,"results":"13","hashOfConfig":"14"},{"size":2152,"mtime":1609948623212,"results":"15","hashOfConfig":"14"},{"size":1704,"mtime":1609950521442,"results":"16","hashOfConfig":"14"},{"size":1305,"mtime":1609249263123,"results":"17","hashOfConfig":"14"},{"size":4248,"mtime":1609333134056,"results":"18","hashOfConfig":"14"},{"size":75,"mtime":1609333134056,"results":"19","hashOfConfig":"14"},{"size":2622,"mtime":1609333134056,"results":"20","hashOfConfig":"14"},{"size":3045,"mtime":1609948903306,"results":"21","hashOfConfig":"14"},{"size":13881,"mtime":1610026165831,"results":"22","hashOfConfig":"14"},{"size":5145,"mtime":1609948623213,"results":"23","hashOfConfig":"14"},{"size":415,"mtime":1609333134056,"results":"24","hashOfConfig":"14"},{"size":1536,"mtime":1609948623213,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1runfqf",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/axel/Programming/study-planner/frontend/src/index.js",[],["52","53"],"/Users/axel/Programming/study-planner/frontend/src/App.js",[],"/Users/axel/Programming/study-planner/frontend/src/components/navbar.component.js",[],"/Users/axel/Programming/study-planner/frontend/src/components/about.component.js",[],"/Users/axel/Programming/study-planner/frontend/src/components/register.component.js",[],"/Users/axel/Programming/study-planner/frontend/src/context/UserContext.js",[],"/Users/axel/Programming/study-planner/frontend/src/components/login.component.js",[],"/Users/axel/Programming/study-planner/frontend/src/components/archived-tasks-list.component.js",[],"/Users/axel/Programming/study-planner/frontend/src/components/active-tasks-list.component.js",["54"],"/Users/axel/Programming/study-planner/frontend/src/components/account.component.js",["55"],"import axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport '../styles/custom.css';\nimport Modal from 'react-bootstrap/Modal';\nimport ErrorNotice from \"./error-notice.component\";\n\n\nfunction Course(props){\n    return (\n        <div className=\"course-item mb-2\">\n            <h6>{props.title}</h6>\n            <button type=\"button\" className=\"btn btn-link mr-2\" onClick={() => props.editCourse(props.title)}>Edit</button>\n            <button type=\"button\" className=\"btn btn-link\" onClick={() => props.removeCourse(props.title)}>Remove</button>\n        </div>\n    );\n\n}\n\nexport default function Account(){\n    const [newCourse, setNewCourse] = useState('');\n    const [shouldRefresh, setShouldRefresh] = useState(true);\n    const [userData, setUserData] = useState();\n    const [showModal, setShowModal] = useState(false);\n    const [originalCourse, setOriginalCourse] = useState('');\n    const [editCourseText, setEditCourseText] = useState('');\n    const [error, setError] = useState();\n\n    useEffect(() => {\n        async function fetchData(){\n            let token = localStorage.getItem('auth-token');\n\n            const tokenRes = await axios.post('http://localhost:5000/user/tokenIsValid', null,\n                { headers: { 'x-auth-token': token } });\n            \n            if(tokenRes.data){\n                const userRes = await axios.get('http://localhost:5000/user/getuser/', { \n                    headers: {'x-auth-token': token} \n                });\n                setUserData(userRes.data);\n            }\n\n            console.log(userData);\n        }\n\n        fetchData();\n    }, [shouldRefresh]);\n\n\n    const onAddCourse = async (e) => {\n        try{\n            e.preventDefault();\n            \n            const token = localStorage.getItem('auth-token');\n            const course = {newCourse};\n            setNewCourse('');   // Clear course input field\n            setShouldRefresh(!shouldRefresh);    // Value doesn't matter. This is only used to trigger a re-render (using useEffect)\n            await axios.post('http://localhost:5000/user/add-course/', course, { headers: {'x-auth-token': token} });\n        }\n        catch(err){\n            console.log(err);\n        }\n    }\n\n    function onRemoveCourse(course){\n        try{\n            const token = localStorage.getItem('auth-token');\n            setShouldRefresh(!shouldRefresh);    // Value doesn't matter. This is only used to trigger a re-render (using useEffect)\n            axios.delete('http://localhost:5000/user/remove-course/'+course, { headers: {'x-auth-token': token} });\n        }\n        catch(err){\n            console.log(err);\n        }\n    }\n\n    function toggleModal(course){\n        setShowModal(!showModal);\n        setEditCourseText(course);\n        setOriginalCourse(course);\n    }\n\n    const onEditCourse = async (e) => {\n        e.preventDefault();\n\n        const token = localStorage.getItem('auth-token');\n        const update = {originalCourse, editCourseText};\n        await axios.post('http://localhost:5000/user/update-course/', update, { headers: {'x-auth-token': token} })\n            .then(response => {\n                console.log(response);\n                toggleModal('');\n                setShouldRefresh(!shouldRefresh);\n            })\n            .catch((err) => {\n                err.response.data.msg && setError(err.response.data.msg);\n            });\n    }\n\n    return (\n        <div className=\"container-fluid px-5 pt-5\">\n            <div className=\"row\">\n                <div className=\"col-3\">\n                    <h2 className=\"mb-5\">User Settings</h2>\n                    <h5 className=\"mb-3\">Courses</h5>\n                    <form onSubmit={onAddCourse}>\n                        <input type=\"text\" className=\"add-course-field\" value={newCourse} onChange={e => setNewCourse(e.target.value)}/>\n                        <button className=\"btn btn-purple btn px-3 ml-2 float-right\">Add</button> \n                    </form>\n                    <div className=\"overflow-scroll\">\n                        {userData && userData.courses.map(course => <Course key={course} title={course} removeCourse={onRemoveCourse} editCourse={toggleModal}/>)}\n                    </div>\n                </div>\n            </div>\n            <Modal show={showModal} onHide={() => toggleModal('')} className=\"mt-15\">\n                <Modal.Body>\n                    <div className=\"text-center\">\n                        {error && (\n                            <ErrorNotice message={error} clearError={() => setError(undefined)} />\n                        )}\n                        <form onSubmit={onEditCourse}>\n                            <input type=\"text\" className=\"form-control mb-3\" value={editCourseText} onChange={e => setEditCourseText(e.target.value)}/>\n                            <button type=\"button\" className=\"btn btn-secondary mr-3\" onClick={() => toggleModal('')}>Cancel</button>\n                            <button className=\"btn btn-success\">Change</button>\n                        </form>\n                    </div>\n                </Modal.Body>\n            </Modal>\n        </div>\n    );\n\n}","/Users/axel/Programming/study-planner/frontend/src/components/error-notice.component.js",[],"/Users/axel/Programming/study-planner/frontend/src/components/authOptions.js",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":8,"column":10,"nodeType":"62","messageId":"63","endLine":8,"endColumn":31},{"ruleId":"64","severity":1,"message":"65","line":46,"column":8,"nodeType":"66","endLine":46,"endColumn":23,"suggestions":"67"},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'relativeTimeThreshold' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userData'. Either include it or remove the dependency array.","ArrayExpression",["70"],"no-global-assign","no-unsafe-negation",{"desc":"71","fix":"72"},"Update the dependencies array to be: [shouldRefresh, userData]",{"range":"73","text":"74"},[1625,1640],"[shouldRefresh, userData]"]